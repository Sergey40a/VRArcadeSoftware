//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRTicket> GetVRTicketMappingConfiguration()
        {
            MappingConfiguration<VRTicket> configuration = this.GetVRTicketClassConfiguration();
            this.PrepareVRTicketConfigurations(configuration);
            this.OnPrepareVRTicketConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRTicket> GetVRTicketClassConfiguration()
        {
            MappingConfiguration<VRTicket> configuration = new MappingConfiguration<VRTicket>();
            configuration.MapType(x => new { }).ToTable("VRTickets");
            return configuration;
        }
	
        public void PrepareVRTicketConfigurations(MappingConfiguration<VRTicket> configuration)
        {
            configuration.HasProperty(x => x.GUID).ToColumn(@"GUID").IsIdentity().WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().HasLength(36).IsUnicode();
            configuration.HasProperty(x => x.TimeStampCreate).ToColumn(@"TimeStampCreate").WithOpenAccessType(OpenAccessType.DateTime).IsNotNullable();
            configuration.HasProperty(x => x.TimeStampDelete).ToColumn(@"TimeStampDelete").WithOpenAccessType(OpenAccessType.DateTime).IsNotNullable();
            configuration.HasProperty(x => x.Minutes).ToColumn(@"Minutes").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasDefaultValue();
            configuration.HasProperty(x => x.VRTicketTypeID).ToColumn(@"VRTicketTypeID").WithOpenAccessType(OpenAccessType.Int32).IsNullable();
            configuration.HasProperty(x => x.VRClientID).ToColumn(@"VRClientID").WithOpenAccessType(OpenAccessType.Int32).IsNullable().HasPrecision(11);
            configuration.HasProperty(x => x.IsDeleted).ToColumn(@"IsDeleted").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable();
            configuration.HasProperty(x => x.WaiverLogID).ToColumn(@"WaiverLogID").WithOpenAccessType(OpenAccessType.Int32).IsNullable();
            configuration.HasAssociation<VRTicketType>(x => x.VRTicketType).WithOpposite(op => op.VRTickets).HasConstraint((x, y) =>  x.VRTicketTypeID == y.ID);
            configuration.HasAssociation<VRClient>(x => x.VRClient).WithOpposite(op => op.VRTickets).HasConstraint((x, y) =>  x.VRClientID == y.ID);
            configuration.HasAssociation<VRManageLog>(x => x.VRManageLogs).WithOpposite(op => op.VRTicket).HasConstraint((x, y) =>  x.GUID == y.VRTicketGUID);
            configuration.HasAssociation<VRWaiverLog>(x => x.WaiverLog).WithOpposite(op => op.VRTickets).HasConstraint((x, y) =>  x.WaiverLogID == y.ID);
        }

        partial void OnPrepareVRTicketConfigurations(MappingConfiguration<VRTicket> configuration);
    }
}
