//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRClienthistory> GetVRClienthistoryMappingConfiguration()
        {
            MappingConfiguration<VRClienthistory> configuration = this.GetVRClienthistoryClassConfiguration();
            this.PrepareVRClienthistoryConfigurations(configuration);
            this.OnPrepareVRClienthistoryConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRClienthistory> GetVRClienthistoryClassConfiguration()
        {
            MappingConfiguration<VRClienthistory> configuration = new MappingConfiguration<VRClienthistory>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("VRClienthistories");
            return configuration;
        }
	
        public void PrepareVRClienthistoryConfigurations(MappingConfiguration<VRClienthistory> configuration)
        {
            configuration.HasProperty(x => x.ID).ToColumn(@"ID").IsIdentity(KeyGenerator.Autoinc).WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.StartTime).ToColumn(@"StartTime").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasProperty(x => x.EndTime).ToColumn(@"EndTime").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasProperty(x => x.TileConfigID).ToColumn(@"TileConfigID").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.VRClientID).ToColumn(@"VRClientID").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasAssociation<VRTileconfig>(x => x.Tileconfig).WithOpposite(op => op.Clienthistories).HasConstraint((x, y) =>  x.TileConfigID == y.ID);
            configuration.HasAssociation<VRClient>(x => x.VRClient).WithOpposite(op => op.VRClienthistories).HasConstraint((x, y) =>  x.VRClientID == y.ID);
        }

        partial void OnPrepareVRClienthistoryConfigurations(MappingConfiguration<VRClienthistory> configuration);
    }
}
