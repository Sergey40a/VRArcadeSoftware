//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRTileconfig> GetVRTileconfigMappingConfiguration()
        {
            MappingConfiguration<VRTileconfig> configuration = this.GetVRTileconfigClassConfiguration();
            this.PrepareVRTileconfigConfigurations(configuration);
            this.OnPrepareVRTileconfigConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRTileconfig> GetVRTileconfigClassConfiguration()
        {
            MappingConfiguration<VRTileconfig> configuration = new MappingConfiguration<VRTileconfig>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("VRTileconfigs");
            return configuration;
        }
	
        public void PrepareVRTileconfigConfigurations(MappingConfiguration<VRTileconfig> configuration)
        {
            configuration.HasProperty(x => x.ID).ToColumn(@"ID").IsIdentity(KeyGenerator.Autoinc).WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.TileGUID).ToColumn(@"TileGUID").WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasProperty(x => x.TileTitle).ToColumn(@"TileTitle").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.TileHeight).ToColumn(@"TileHeight").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.TileWidth).ToColumn(@"TileWidth").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.AgeRequire).ToColumn(@"AgeRequire").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasDefaultValue();
            configuration.HasProperty(x => x.ImageData).ToColumn(@"ImageData").WithOpenAccessType(OpenAccessType.Blob).IsNotNullable();
            configuration.HasProperty(x => x.TileDesc).ToColumn(@"TileDesc").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Command).ToColumn(@"Command").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Arguments).ToColumn(@"Arguments").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.WorkingPath).ToColumn(@"WorkingPath").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.VideoURL).ToColumn(@"VideoURL").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Order).ToColumn(@"Order").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.TileRowNumber).ToColumn(@"TileRowNumber").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.TileConfigSetID).ToColumn(@"TileConfigSetID").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.VRTileconfigID).ToColumn(@"VRTileconfigID").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable().HasPrecision(11);
            configuration.HasProperty(x => x.IsDeleted).ToColumn(@"IsDeleted").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable();
            configuration.HasAssociation<VRClienthistory>(x => x.Clienthistories).WithOpposite(op => op.Tileconfig).HasConstraint((x, y) =>  x.ID == y.TileConfigID);
            configuration.HasAssociation<VRTileconfigset>(x => x.Tileconfigset).WithOpposite(op => op.Tileconfigs).HasConstraint((x, y) =>  x.TileConfigSetID == y.ID);
            configuration.HasAssociation<VRTileconfig>(x => x.VRTileconfigs).WithOpposite(op => op.VRTileconfig1).HasConstraint((x, y) =>  x.ID == y.VRTileconfigID);
            configuration.HasAssociation<VRTileconfig>(x => x.VRTileconfig1).WithOpposite(op => op.VRTileconfigs).HasConstraint((x, y) =>  x.VRTileconfigID == y.ID);
            configuration.HasAssociation<VRManageLog>(x => x.VRManageLogs).WithOpposite(op => op.VRTileconfig).HasConstraint((x, y) =>  x.ID == y.VRTileconfigID);
        }

        partial void OnPrepareVRTileconfigConfigurations(MappingConfiguration<VRTileconfig> configuration);
    }
}
