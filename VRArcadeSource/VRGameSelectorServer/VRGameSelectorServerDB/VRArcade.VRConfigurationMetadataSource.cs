//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRConfiguration> GetVRConfigurationMappingConfiguration()
        {
            MappingConfiguration<VRConfiguration> configuration = this.GetVRConfigurationClassConfiguration();
            this.PrepareVRConfigurationConfigurations(configuration);
            this.OnPrepareVRConfigurationConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRConfiguration> GetVRConfigurationClassConfiguration()
        {
            MappingConfiguration<VRConfiguration> configuration = new MappingConfiguration<VRConfiguration>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("VRConfigurations");
            return configuration;
        }
	
        public void PrepareVRConfigurationConfigurations(MappingConfiguration<VRConfiguration> configuration)
        {
            configuration.HasProperty(x => x.Type).ToColumn(@"Type").IsIdentity().WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasProperty(x => x.Value).ToColumn(@"Value").WithOpenAccessType(OpenAccessType.Clob).IsNotNullable().IsUnicode();
        }

        partial void OnPrepareVRConfigurationConfigurations(MappingConfiguration<VRConfiguration> configuration);
    }
}
