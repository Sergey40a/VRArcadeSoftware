//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRBookingReference> GetVRBookingReferenceMappingConfiguration()
        {
            MappingConfiguration<VRBookingReference> configuration = this.GetVRBookingReferenceClassConfiguration();
            this.PrepareVRBookingReferenceConfigurations(configuration);
            this.OnPrepareVRBookingReferenceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRBookingReference> GetVRBookingReferenceClassConfiguration()
        {
            MappingConfiguration<VRBookingReference> configuration = new MappingConfiguration<VRBookingReference>();
            configuration.MapType(x => new { }).WithCascadeDelete(CascadeDeleteOption.No).ToTable("VRBookingReferences");
            return configuration;
        }
	
        public void PrepareVRBookingReferenceConfigurations(MappingConfiguration<VRBookingReference> configuration)
        {
            configuration.HasProperty(x => x.ID).ToColumn(@"ID").IsIdentity(KeyGenerator.Autoinc).WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.Reference).ToColumn(@"Reference").WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.IsNonTimedTiming).ToColumn(@"IsNonTimedTiming").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable();
            configuration.HasProperty(x => x.IsTimedTiming).ToColumn(@"IsTimedTiming").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable();
            configuration.HasProperty(x => x.Duration).ToColumn(@"Duration").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.NumberOfBookingTotal).ToColumn(@"NumberOfBookingTotal").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.NumberOfBookingLeft).ToColumn(@"NumberOfBookingLeft").WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.TimeStampCreate).ToColumn(@"TimeStampCreate").WithOpenAccessType(OpenAccessType.DateTime).IsNotNullable();
            configuration.HasProperty(x => x.BookingChanged).ToColumn(@"BookingChanged").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasProperty(x => x.BookingDeleted).ToColumn(@"BookingDeleted").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasProperty(x => x.BookingStartTime).ToColumn(@"BookingStartTime").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasProperty(x => x.BookingEndTime).ToColumn(@"BookingEndTime").WithOpenAccessType(OpenAccessType.DateTime).IsNullable();
            configuration.HasAssociation<VRWaiverLog>(x => x.WaiverLogs).WithOpposite(op => op.BookingReference).HasConstraint((x, y) =>  x.ID == y.BookingReferenceID);
        }

        partial void OnPrepareVRBookingReferenceConfigurations(MappingConfiguration<VRBookingReference> configuration);
    }
}
