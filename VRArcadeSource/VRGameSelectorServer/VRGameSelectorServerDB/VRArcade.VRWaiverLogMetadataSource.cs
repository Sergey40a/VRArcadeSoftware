//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRWaiverLog> GetVRWaiverLogMappingConfiguration()
        {
            MappingConfiguration<VRWaiverLog> configuration = this.GetVRWaiverLogClassConfiguration();
            this.PrepareVRWaiverLogConfigurations(configuration);
            this.OnPrepareVRWaiverLogConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRWaiverLog> GetVRWaiverLogClassConfiguration()
        {
            MappingConfiguration<VRWaiverLog> configuration = new MappingConfiguration<VRWaiverLog>();
            configuration.MapType(x => new { }).ToTable("VRWaiverLogs");
            return configuration;
        }
	
        public void PrepareVRWaiverLogConfigurations(MappingConfiguration<VRWaiverLog> configuration)
        {
            configuration.HasProperty(x => x.ID).ToColumn(@"ID").IsIdentity(KeyGenerator.Autoinc).WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.IsNewEntry).ToColumn(@"IsNewEntry").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable().HasDefaultValue();
            configuration.HasProperty(x => x.FirstName).ToColumn(@"FirstName").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.LastName).ToColumn(@"LastName").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Address).ToColumn(@"Address").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNullable().IsUnicode();
            configuration.HasProperty(x => x.City).ToColumn(@"City").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Province).ToColumn(@"Province").WithOpenAccessType(OpenAccessType.Varchar).IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Postcode).ToColumn(@"Postcode").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Cell).ToColumn(@"Cell").WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.DOB).ToColumn(@"DOB").WithOpenAccessType(OpenAccessType.DateTime).IsNotNullable();
            configuration.HasProperty(x => x.Email).ToColumn(@"Email").WithOpenAccessType(OpenAccessType.StringVariableLength).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.SignFileName).ToColumn(@"SignFileName").WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.TimeStampCreate).ToColumn(@"TimeStampCreate").WithOpenAccessType(OpenAccessType.DateTime).IsNotNullable();
            configuration.HasProperty(x => x.IsDeleted).ToColumn(@"IsDeleted").WithOpenAccessType(OpenAccessType.Boolean).IsNotNullable();
            configuration.HasProperty(x => x.BookingReferenceID).ToColumn(@"BookingReferenceID").WithOpenAccessType(OpenAccessType.Int32).IsNullable();
            configuration.HasAssociation<VRTicket>(x => x.VRTickets).WithOpposite(op => op.WaiverLog).HasConstraint((x, y) =>  x.ID == y.WaiverLogID);
            configuration.HasAssociation<VRBookingReference>(x => x.BookingReference).WithOpposite(op => op.WaiverLogs).HasConstraint((x, y) =>  x.BookingReferenceID == y.ID);
        }

        partial void OnPrepareVRWaiverLogConfigurations(MappingConfiguration<VRWaiverLog> configuration);
    }
}
