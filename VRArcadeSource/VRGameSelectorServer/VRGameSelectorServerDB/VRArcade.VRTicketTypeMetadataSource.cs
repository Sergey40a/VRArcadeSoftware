//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 3/3/2019 8:16:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace VRGameSelectorServerDB
{
    public partial class VRArcadeDataAccessModelMetadataSource
    {
        public MappingConfiguration<VRTicketType> GetVRTicketTypeMappingConfiguration()
        {
            MappingConfiguration<VRTicketType> configuration = this.GetVRTicketTypeClassConfiguration();
            this.PrepareVRTicketTypeConfigurations(configuration);
            this.OnPrepareVRTicketTypeConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<VRTicketType> GetVRTicketTypeClassConfiguration()
        {
            MappingConfiguration<VRTicketType> configuration = new MappingConfiguration<VRTicketType>();
            configuration.MapType(x => new { }).ToTable("VRTicketTypes");
            return configuration;
        }
	
        public void PrepareVRTicketTypeConfigurations(MappingConfiguration<VRTicketType> configuration)
        {
            configuration.HasProperty(x => x.ID).ToColumn(@"ID").IsIdentity(KeyGenerator.Autoinc).WithOpenAccessType(OpenAccessType.Int32).IsNotNullable();
            configuration.HasProperty(x => x.Type).ToColumn(@"Type").WithOpenAccessType(OpenAccessType.Varchar).IsNotNullable().IsUnicode();
            configuration.HasAssociation<VRTicket>(x => x.VRTickets).WithOpposite(op => op.VRTicketType).HasConstraint((x, y) =>  x.ID == y.VRTicketTypeID);
        }

        partial void OnPrepareVRTicketTypeConfigurations(MappingConfiguration<VRTicketType> configuration);
    }
}
